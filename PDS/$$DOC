Note:  This doc is a text transcription of a PDF conversion from the
       Powerpoint presentation.  All responsibility for errors is
       mine.  (Sam Golob)



                 Who Did What to Whom in CSA?

                       Session 2851

                   Speaker:   Mike Reeves

                    mike.reeves@fmr.com


    Fidelity Investments

    One Destiny Way

    West Lake, Texas 76262          Thursday, Feb 27,2003




    Overview.

    We will discuss some common CSA problems and how to
    determine when we may be experiencing a CSA
    problem. How to capture documentation for the
    problems. And finally, how we can use CSA tracker
    data and VSMLIST to proactively take control of
    understanding how our CSA is utilized.


    Who Did What to Whom in CSA?        Summary of Topics

      What's the problem anyway?
      IBM CSA Tracker, what it does and does not do.
      How do we fill in the gaps?
      CSA Tracker Data Structure.
      VSMLIST Data Structure.
      Merging CSA Tracker and VSMLIST Data.
      Understanding and Reporting on the Results.
      Operational Considerations.
      References.
      Questions and maybe answers?


    What's the problem anyway?

    Answers - Always know the general condition of your
    CSA. Be proactive, Use the IBM CSA Tracker data.
    When you decide there is a problem - Gather docs, SAD,
    SVC Dumps. Open IBM PMR.
    Most Common Problems -
      Creep that chips away at the largest free block of CSA.
      Sudden changes that gobble up CSA.
      SQA overflow into CSA.

 --------------------------------------------------------------------

    IBM CSA Tracker -
    What it does and does not do!

    The IBM CSA Tracker provides a data store of allocated
    CSA, captured at the time the storage is acquired and
    cleared at the time the storage is released.
    Information collected by the IBM CSA Tracker
      Time, address, and length of the allocation
      Owner Jobname, jobnumber, asid, and status
    Information the IBM CSA Tracker does not collect
      Subpool
      Storage protect key

 --------------------------------------------------------------------

    How Do We Fill the Gaps?

    Completing the Picture.
    The primary missing pieces in the CSA Tracker data are
    Subpool and Storage Protect Key.
    Where do we get the missing information?
      Run the RSM control block chains manually? L
      IBM VSM level 2 can figure it out. Right? L
      Use VSMLIST macro to pull the CSA and SQA VSM map?

    Ultimately, merging the CSA Tracker data and VSMLIST
    data will provide the best solution. Allowing us to get the
    complete picture of the  Who did What to Who? .

 --------------------------------------------------------------------

    CSA Tracker Data Structure

    CSA tracker data is based on a two table lookup.
    The table must be able to represent the largest allocation of CSA,
    or 2 gigabytes. There are 256 GQAT index entries, each
    representing 8meg of storage.
    Each GQAT index entry points to a table of GQATs each
    representing a 8Meg of storage. There are 128 entries in each
    GQAT. Each entry points to a queue of GQEs which describe the
    CSA allocations. There are a maximum of 8192 GQE entries in
    the GQE table in LIFO order. Each GQE points to a CAUB which
    describes the of the address space that allocated the storage.
    Mathematically, this would be;
    2Gig/256 (GQAT_index entries) = 8Meg/128 (GQAT entries) =
    64k/8 = 8192 (GQE entries).
    GQAT = GQE Queue Anchor Table - GQE = GETMAINed Queue Element
    CAUB = Common Area User Block

 --------------------------------------------------------------------

    CSA Tracker Data Structure - Diagram

                           How the Address is used to hash
                           into the tables.

                           (left to right starting with
     Common                the bit to the right of the
     Storage               high order bit)
     0-2Gig
             \             1111111111111111 ..1
               \
                 \         A       B          C
                   \
                    >>
                        GQAT_index
                        Pointer 1

                          256  \
                                 >>
                                   GQAT
                                   Pointer 1

                                     128   \
                                             >>
                                                GQE
                                                Pointer 1

                                                 8192 max
                                                       \
                                                        >>
                                                         CAUB


    A   Bits 1-8 may be used to derive the
    correct GQAT_index entry.
    B   Bits 9-15 may be used to derive the
    correct GQAT entry.
    C   The GQE entry can be found by
    scanning the GQE entries for a match.


 --------------------------------------------------------------------


    CSA Tracker Data Structure - GQE

      Pointer to next GQE
      TOD Clock (Date & Time) of allocation
      Pointer to the CAUB for this GQE
      Start address of the allocated area
      Length of the allocated area
      Getmain that obtained the storage (debugging aid for
    identification of the module that did the getmain.)
      GQE Return address. Last bit used to mark SQA or
    CSA.
    Mapping macro - IGVGQE
    Information in the GQE


 --------------------------------------------------------------------


    CSA Tracker Data Structure - CAUB

      Jobname of the job or started task that allocated the
    storage.
      Jobid of the job or started task that allocated the storage.
      ASID of the job or started task that allocated the storage.
      Whether or not that address space is still active or in
     Owner Gone  status.
      Other information, like unowned time and date, above
    and below the line getmain amounts, system storage
    indicators.
    Mapping Macro - IGVCAUB
    Information in the CAUB


 --------------------------------------------------------------------


    VSMLIST SQA/CSA Map Structure

    The VSMLIST macro can be used to complement the data
    collected by the CSA Tracker, producing a complete
    picture of allocated CSA. VSLLIST provides :
      An allocation map of SQA/CSA allocated, free, and
    unallocated storage.
      Identity of the storage subpool and storage protect key
    of allocated SQA/CSA.
    The merging process should be from VSMLIST data to
    CSA Tracker because the data from VSM list in is
    address order and the GQEs in CSA Tracker are in
    LIFO order.


 --------------------------------------------------------------------


    VSMLIST SQA/CSA Map Structure  (Cont.)

    VSMLIST builds a map of virtual storage and sends that map back
    in the form of tables describing storage allocated in each subpool.
    The contents of each field is 4 or 8 bytes. Fields are:
      Number of Subpools
      Subpool Descriptor
      Number of Allocated Blocks
      Allocated Block Descriptor
      Free Space Descriptor
    The  Number of Subpools is the first field in the data area and
    is a count of the subpools included in the data area. Each
    Subpool Descriptor  describes the sub that contains the
    Allocated Blocks  and likely will contain multiple allocated
    blocks as indicated in the  Number of Allocated Blocks  field.

 --------------------------------------------------------------------


    VSMLIST SQA/CSA Structure  -  Picture

    Area Returned by VSMLIST  (fields listed in order below)

    First Subpool Block

    Number of Subpools
    Subpool Descriptor
    Number of allocated blocks
    Allocated block descriptor  -  alternate 2 fullwords
    Free Block descriptor       -  next alternate 2 fullwords

    Another Subpool block
    Last  allocated block descriptor
    Last  free block descriptor
    .. ..

    Last Subpool block

       First Fullword in Subpool Block - Fullword containing
                                         count of subpools

       Second Fullword in Subpool Block -

            Byte Meaning
            0  X'00' to identify a subpool descriptor
            1  Length of subpool descriptor
            2  Subpool ID
            3  Misc. flags and storage key as follows:

                 Bit Meaning When Set
                 0-3   Storage key
                 4-31  N/A for CSA

            4-7   Zero for CSA.

       Third Fullword - Fullword containing count of blocks

       Fourth Fullword

            Byte Content
            0-3    Address of block

                    Bit Meaning
                    0    REAL below
                    1    REAL above

            4-7 Length of block

       This is followed by fullwords - Free Block Descriptors


 --------------------------------------------------------------------

      Merging VSMLIST and CSA Tracker Data

      Obtaining GQAT Address  -  Picture


      CVT  --->  CVTGDA  --->  GDAGQAT_INDEX


         Then from subpool descriptor block,
         the block address (fourth fullword)
         use bits 1-8, ignoring bit 0,
         and multiply the results by 4.


         Add the GQAT_Index base to the result of this multiply
         to get the GQAT address.

     Mapping macros - IHAPSA, CVT DSECT=YES, IHAGDA, IGVCAUB, IGVGQE


 --------------------------------------------------------------------


      Merging VSMLIST & CSA Tracker Data

      Finding the GQE entry  -  Picture

      CVT  --->  CVTGDA  --->  GDAGQAT_INDEX  --->   Get GQAT Address

            --->  Get GQE Queue  --->  Compare Block Address
                                       to GQE Entry Address

            --->  |  Not it, then load GQE_NEXT and compare again
                  |
                  |  Address match, so go process GQE


     Mapping macros - IHAPSA, CVT DSECT=YES, IHAGDA, IGVCAUB, IGVGQE


 --------------------------------------------------------------------


     Understanding and Reporting on the Results

     The output from the VSMLIST/CSA Tracker data merge
     gives a complete picture of CSA utilization by:
       Identity of allocator - Job name, number and ASID
       Status of allocator - active or owner gone
       Date and Time of allocation
       Size and location of the allocation
       Subpool of allocation
       Storage protect key of allocation
     The resulting data store requires processing to generate
     statistical analysis of data.


 --------------------------------------------------------------------


     Understanding and Reporting on the Results (cont.)

       Times are in GMT if that is your default timer method.
       Pay attention to allocations that are OG (Owner Gone).
       Look for patterns and eye catchers in the data.

     Recommended reporting:
       Subpool <-<-
       Job name/Number/ASID
       Storage Protect Key
       Owner Gone ß
       Location of storage, above or below the line

     SAS is the most flexible tool for producing quick accurate
     reports of what the data represents.


 --------------------------------------------------------------------


     CSA Tracker Reporting Example CSA Tracker Reporting Example

     By Subpool

     CSA SUBPOOL ALLOCATION BY DATE:CPU
     -----------DATE-----------
     CPU AREA SUBPOOL 03-02-09 03-02-10 03-02-11 TOTAL
     ---- ----- ------- -------- -------- -------- ------
     CPUx ABOVE 0227        6.1M     1.3M   207.8K   7.7M
                0228       17.6M   820.7K   647.8K  19.0M
                0231       29.0M     6.1M     9.6M  44.8M
                0241       72.2M    24.6M    13.4M 110.3M
     ---- -----         -------- -------- -------- ------
     CPUx ABOVE           125.0M    33.0M    23.9M 181.9M

     SQA SUBPOOL ALLOCATION BY DATE:CPU
     -----------DATE-----------
     CPU AREA SUBPOOL 03-02-09 03-02-10 03-02-11 TOTAL
     ---- ----- ------- -------- -------- -------- ------
     CPU1 ABOVE 0239        4.8M    86.8K   386.9K   5.3M
                0245      143.5M     6.4M     6.0M 155.9M
                0247        3.7M   924.1K        .   4.7M
                0248       18.8M     1.3M    91.0K  20.2M
     ---- -----         -------- -------- -------- ------
     CPU1 ABOVE           170.9M     8.7M     6.4M 186.2M



 --------------------------------------------------------------------


     CSA Tracker Reporting Example  -  Real CSA Problem

     We recently experienced a sudden spike in CSA utilization.
     Upon further investigation we determined the root cause of
     this problem. IBM APAR UA00149 (PDSE SPE).

 ------------------------SUBPOOL------------------------
 HOUR    0227   0228   0231   0239   0241   0245   0247   0248   TOTAL
 --------- SPK ------ ------ ------ ------ ------ ------ ------  -----
 16 0       .    1.2K   5.3K   5.6K 362.3K   2.1M 240.0K 324.4K   3.0M
    1       .       .      .      .  10.9K      .      .      .  10.9K
    3       .       .      .      .  40.0K      .      .      .  40.0K
    4       .       .      .  43.5K      .      .      .      .  43.5K
    5       .       .  37.7M      . 836.0K      .      .      .  38.5M
    6  201.5K       . 393.0K      .   1.0M      .      .      .   1.6M
    7       .       .   4.5M      . 468.0K      .      .      .   5.0M
    8       .    4.0K      .      .  13.1K      .      .      .  17.1K


 --------------------------------------------------------------------


     CSA Tracker

     Operational Considerations

       What is the default? SYS1.IBM.PARMLIB(DIAG00)

     Specified in IEASYS00 at IPL time or through MVS command
     SET DIAG=xx. The IBM default is DIAG00 which contains:
     VSM TRACK CSA(ON) SQA(ON)
     VSM TRACE GETFREE(OFF)
       How do I turn it on?    - SET DIAG=xx
       How do I turn it off?   - SET DIAG=xx
       How do I know it is on? - IPCS
     From TSO get into IPCS and change default to  ACTIVE .
     From option 6 enter command:
      VERBX VSMDATA 'OWNCOMM DETAIL ALL   .
     The CSA Tracker does incur overhead, but the benefit is well worth
     the small penalty in CPU consumption.


 --------------------------------------------------------------------


     IPCS CSA Tracker Data IPCS CSA Tracker Data

     Set Source to Active Set Source to Active

     ------------------------- IPCS Default Values ---------------------
     Command ===>
     You may change any of the defaults listed below. The defaults
     shown before any changes are LOCAL. Change scope to GLOBAL to
     display global defaults.

     Scope    ==>  LOCAL     (LOCAL, GLOBAL, or BOTH)

     If you change the Source default, IPCS will display the
     current default Address Space for the new source and will
     ignore any data entered in the Address Space field.

     Source   ==>  ACTIVE

     Address Space   ==> ASID(X'0403')
     Message Routing ==> NOPRINT TERMINAL
     Message Control ==> NOCONFIRM VERIFY FLAG(ERROR)
     Display Content ==> NOMACHINE REMARK REQUEST NOSTORAGE SYMBOL


 --------------------------------------------------------------------


   IPCS CSA Tracker Data

   Option 6            Issue verbx vsmdata

   ------------------------- IPCS Subcommand Entry ---------------------
   Enter a free-form IPCS subcommand or a CLIST or REXX exec invocation
   ===> verbx vsmdata 'owncomm detail contents(no)'
   ----------------------- IPCS Subcommands and Abbreviations ----------
   ADDDUMP         | DROPDUMP, DROPD  | LISTMAP, LMAP  | RUNCHAIN, RUNC
   ANALYZE         | DROPMAP, DROPM   | LISTSYM, LSYM  | SCAN
   ARCHECK         | DROPSYM, DROPS   | LISTUCB, LISTU | SELECT
   ASCBEXIT, ASCBX | EQUATE, EQU, EQ  | LITERAL        | SETDEF, SETD
   ASMCHECK, ASMK  | FIND, F          | LPAMAP         | STACK
   CBFORMAT, CBF   | FINDMOD, FMOD    | MERGE          | STATUS, ST
   CBSTAT          | FINDUCB, FINDU   | NAME           | SUMMARY, SUMM
   CLOSE           | GTFTRACE, GTF    | NAMETOKN       | SYSTRACE


 --------------------------------------------------------------------


    IPCS CSA Tracker Data

    Option 6   Issue verbx vsmdata

IPCS OUTPUT STREAM ---------------------------------------------------
Command ===>

VIRTUAL STORAGE MANAGEMENT DUMP FORMAT ROUTINE
THE FOLLOWING KEYWORDS ARE IN EFFECT:
OWNCOMM
DETAIL
ALL
SORTBY(ASIDADDR)
CONTENTS(NO)
Date Time

ASID Job Name       Id St T  Address   Length Ret Addr MM/DD/YYYY HH:MM:SS
---- -------- -------- -- - -------- -------- -------- ---------- --------
0000 *SYSTEM* ........ Ac S 00A85180 00000180 012379F2 02/25/2003 21:24:39
0000 *SYSTEM* ........ Ac S 00A85300 00000180 012379F2 02/25/2003 15:18:36
0000 *SYSTEM* ........ Ac S 00A85E80 00000180 012379F2 02/25/2003 12:08:10
0000 *SYSTEM* ........ Ac S 00A9C000 00001000 01383062 02/25/2003 13:20:06
0000 *SYSTEM* ........ Ac S 00AA1880 00000180 012379F2 02/25/2003 17:11:15
0000 *SYSTEM* ........ Ac S 00AA2A00 00000180 012379F2 02/25/2003 10:32:56
0000 *SYSTEM* ........ Ac S 00AA8A00 00000180 012379F2 02/25/2003 10:33:55
0000 *SYSTEM* ........ Ac S 00AABA00 00000180 012379F2 02/24/2003 13:36:44


 --------------------------------------------------------------------


CSA Tracker/VSMLIST CSA Tracker/VSMLIST
Raw Data Sample Raw Data Sample
0000 *SYSTEM* ........ Ac S 00EBF000 00001000 K-0-0226 02/25/2003 11:00:57
0000 *SYSTEM* ........ Ac S 00ED1000 00001000 K-0-0226 02/25/2003 11:13:50
0000 *SYSTEM* ........ Ac S 00ED0000 00001000 K-0-0226 02/24/2003 12:01:16
0000 *SYSTEM* ........ Ac S 00ED4000 00001000 K-0-0226 02/25/2003 11:13:50
0000 *SYSTEM* ........ Ac S 00EE9000 00001000 K-0-0226 02/23/2003 16:00:08
0000 *SYSTEM* ........ Ac S 00F70000 00001000 K-0-0226 02/23/2003 03:44:22
0000 *SYSTEM* ........ Ac S 00F71000 00001000 K-0-0226 02/23/2003 03:44:21
0000 *SYSTEM* ........ Ac S 00F72000 00001000 K-0-0226 02/23/2003 03:44:21
0052 ENF      STC23468 Ac S 00F93640 00000030 K-0-0226 02/23/2003 03:49:25
0052 ENF      STC23468 Ac S 00F93670 00000030 K-0-0226 02/23/2003 03:49:25
000A CONSOLE  ........ Ac S 00F936A0 00000060 K-0-0226 02/23/2003 03:44:02
0001 *MASTER* ........ Ac S 00F93700 00000100 K-0-0226 02/22/2003 22:44:22
0000 *SYSTEM* ........ Ac S 00FB6000 00001000 K-0-0226 02/22/2003 22:44:22
0000 *SYSTEM* ........ Ac S 00FB8000 00001000 K-0-0226 02/22/2003 22:44:22


 --------------------------------------------------------------------


    References References
      SY28-1164-11 OS/390 V2R10.0 MVS Data Areas, Vol 1
          (ABEP-DALT)
      SY28-1165-11 OS/390 V2R10.0 MVS Data Areas, Vol 2
          (DCCB-ITZYRETC)
      SC28-1751-09 OS/390 V2R10.0 MVS Initialization and
          Tuning Guide
      SC28-1752-13 OS/390 V2R10.0 MVS Initialization and
          Tuning Reference


 --------------------------------------------------------------------


    Questions.....


