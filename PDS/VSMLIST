//FIDVSMLS JOB (3853,MVS),'ASSEM FIDVSMLS',
// NOTIFY=&SYSUID,CLASS=8,MSGCLASS=U
/*JOBPARM S=*
//ASM PROC
//*
//COMPILE EXEC  PGM=ASMA90,
// PARM=(LIST,OBJECT,NODECK)
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.MODGEN,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(4,2))
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(4,2))
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(4,2))
//SYSLIN   DD  DSN=&&OBJECT,DISP=(MOD,PASS),UNIT=SYSDA,
//             SPACE=(CYL,(5,5))
//*--------------------------------------------------------------------
//LINK    EXEC PGM=IEWL,COND=(4,LT),
// PARM='LET,LIST,MAP'
//SYSPRINT DD  SYSOUT=*
//OBJECT   DD DSN=&&OBJECT,DISP=(OLD,DELETE)
//SYSLIB   DD DSN=your.load.library,DISP=SHR
//SYSUT1   DD UNIT=SYSDA,DISP=NEW,SPACE=(CYL,(2,2))
//SYSLMOD  DD DSN=your.load.library,DISP=SHR
// PEND
//FIDVSMLS EXEC ASM
//COMPILE.SYSIN DD *
FIDVSMLS TITLE 'PROGRAM TO EXTRACT TIOT ENTRIES AND REPORT'
FIDVSMLS CSECT
FIDVSMLS AMODE 31
FIDVSMLS RMODE 24
***********************************************************************
*                                                                     *
* DESCRIPTION - THIS PROGRAM USES THE VSMLIST MACRO TO OBTAIN A MAP   *
*               OF ALLOCATED CSA AND SQA STORAGE WITH FREE SPACE FOR  *
*               EACH SUBPOOL. THE VSMLIST DATA IS PARSED AND FREE     *
*               BLOCKS ARE REMOVED. EACH ALLOCATED BLOCK IS THEN      *
*               USED TO INDEX INTO THE GDA GQAT_INDEX TO LOCATE THE   *
*               CORRECT GQAT. ONCE THE CORRECT GQAT HAS BEEN LOCATED  *
*               THE VSMLIST ADDRESS IS USED TO LOCATE THE CORRECT GQE *
*               TABLE. THE GQE TABLE IS THEN SCANNED AND ALL MATCHING *
*               ENTRIES ARE PROCESSED. IF A GQE ALLOCATION TOD ENTRY  *
*               IS BLANK, THE IPL TIME/DATE TIME FROM THE SMCA IS     *
*               USED.                                                 *
*                                                                     *
*               THE PURPOSE OF USING THIS TECHNIQUE IS TO OBTAIN NOT  *
*               THE INFORMATION FROM THE CSA TRACKER, BUT ALSO THE    *
*               SUBPOOL NUMBER AND STORAGE KEY OF THE REQUEST.        *
*                                                                     *
* GQA/GQE INDEX FORMULA -                                             *
*                                                                     *
*     THE STORAGE ADDRESS FROM THE VSMLIST MAP IS USED TO INDEX       *
*     INTO THE GQAT_INDEX TABLE AS FOLLOWS:                           *
*                                                                     *
*     BITS 1-8 ARE THE GQAT_INDEX TABLE ENTRY NUMBER. THIS NUMBER IS  *
*     MULTIPLIED BY FOUR AND ADDED TO THE GQAT_INDEX ADDRESS FROM     *
*     THE  GDA TO OBTAIN THE ADDRESS OF THE GQE TABLE.                *
*                                                                     *
*     BITS 9-15 ARE THE GQAT TABLE ENTRY NUMBER. THIS NUMBER IS       *
*     MULTIPLIED BY FOUR AND ADDED TO THE GQE ADDRESS FROM THE GQE    *
*     TABLE +4(TO BUMP PAST THE EYECATCHER).                          *
*                                                                     *
*     HERE IS AN EXAMPLE USING 00CC5000 AS THE VSMLIST AREA ADDRESS:  *
*                                                                     *
*     R9 IS CLEARED                                                   *
*     R8 IS LOADED WITH ADDRESS 00CC5000. IT IS THEN SHIFTED RIGHT    *
*        DOUBLE LOGICAL 23 BITS LEAVING 1 IN R8 AND 98000000X IN R9.  *
*        R8 IS THEN SHIFTED LEFT 2 BITS(X4) AND ADDED TO THE ADDRESS  *
*        OF THE GQAT_INDEX FROM THE GDA. THE RESULT IS THE ADDRESS OF *
*        THE GQAT IN WHICH THE GQE TABLE RESIDES.                     *
*                                                                     *
*     R8 IS THE CLEARED AND A SHIFT LEFT DOUBLE LOGICAL OF 7 BITS IS  *
*        DONE RESULTING IN 4C IN R8. R8 IS THEN SHIFTED LEFT 2 BITS   *
*        (X4) AND ADDED TO THE GQAT ADDRESS +4 TO INDEX PAST THE      *
*        EYECATCHER('GQAT') TO OBTAIN THE ADDRES OF THE GQE TABLE.    *
*                                                                     *
*     THE GQE TABLE IS THEN SCANNED FOR ANY ENTRY WITHIN THE RANGE OF *
*     CSA STORAGE FROM THE VSMLIST MAP.                               *
*                                                                     *
*     OUTPUT RECORD LAYOUT:                                           *
*                                                                     *
*         ASID ......... 3-6 ... ADDRESS SPACE ID                     *
*         JOBNAME ...... 8-15 .. NAME OF THE JOB/TSU/STC              *
*         JOBID ........ 17-24 . JOB NUMBER                           *
*         STATUS ....... 26-27 . OG=OWNER GONE OR AC=ACTIVE           *
*         STORAGE TYPE . 29 .... S=SQA OR C=CSA                       *
*         AREA ADDRESS . 31-38 . ADDRESS OF STORAGE AREA              *
*         AREA LENGTH .. 40 47 . LENGTH OF STORAGE AREA               *
*         STORAGE KEY .. 51 .... STORAGE KEY OF REQUEST               *
*         SUBPOOL ...... 53-56 . SUBPOOL NUMBER OF REQUEST            *
*         DATE ......... 58-67 . DATE OF REQUEST OR IPL DATE          *
*         TIME ......... 69-76 . TIME OF REQUEST OR IPL TIME          *
*         GQE ADDRESS .. 78-85 . ADDRESS OF GQE ENTRY                 *
*         CAUB ADDRESS . 87-94 . ADDRESS OF CAUB FOR GQE              *
*         SMFID ........ 96-99 . SMFID OF THE SYSTEM                  *
*                                                                     *
* REGISTER USAGE -----------------------------------------------------*
* R0-R1 --- GENERAL PURPOSE REGISTERS                                 *
* R2 ------ ADDRESS OF THE CURRENT VSMLIST AREA                       *
* R3 ------ COUNT OF SUBPOOLS IN VSMLIST AREA                         *
* R4 ------ COUNT OF SEGMENTS IN SUBPOOL                              *
* R5 ------ VSM SUBPOOL SEGMENT AREA ADDRESS                          *
* R6 ------ VSM SUBPOOL SEGMENT AREA LENGTH                           *
* R7 ------ COUNT OF FREE AREA SEGMENTS                               *
* R8-R9 --- GENERAL PURPOSE REGISTERS                                 *
* R10 ----- ADDRESS OF OUTPUT DCB                                     *
* R11 ----- GENERAL PURPOSE REGISTER                                  *
* R12 ----- PRIMARY BASE REGISTER                                     *
* R13 ----- WORK AREA POINTER/SAVEAREA REGISTER                       *
* R14-R15 - GENERAL PURPOSE REGISTERS                                 *
*                                                                     *
* MACROS USED BY FIDVSMLS --------------------------------------------*
* SYS1.MACLIB                                                         *
* ABEND    CLOSE    CONVTOD  CVT      DCB      DCBD     DCBE          *
* IEESMCA  IGVCAUB  IGVGQE   IHAPSA   IHBINNRA IHBINNRR               *
* IHB01    OPEN     PUT      STCKCONV STORAGE  SYSSTATE               *
* VSMLIST  WTO                                                        *
*                                                                     *
* SYS1.MODGEN                                                         *
* IEZBITS  IEZWPL   IHAGDA                                            *
*                                                                     *
*CHANGE LOG-----------------------------------------------------------*
*-----NAME-------¦--DATE--¦--CHANGES----------------------------------*
*MIKE REEVES     ¦07/29/99¦INITIAL CODING                             *
***********************************************************************
         BAKR R14,0
         LAE   R12,0(R15,0)            SET UP PROGRAM BASE REGISTER
         USING FIDVSMLS,R12            INFORM THE ASSEMBLER
         B     STARTPGM                BRANCH AROUND CONSTANTS
         DC    AL1(STARTPGM-*),C'('    * ID LENGTH
         DC    CL8'FIDVSMLS',C'_'      * MODULE ID
         DC    C'R1.0',C'_'            * RELEASE LEVEL            R1.0
         DC    C'USE AT YOUR OWN RISK!!!!',C'_' * GENERATED BY
         DC    CL8'&SYSDATE'           * ASSEMBLY DATE
         DC    C'@'                    *
         DC    CL8'&SYSTIME',C')'      * ASSEMBLY TIME
STARTPGM LR    R9,R1                   SAVE PARAMETER LIST
         STORAGE OBTAIN,LENGTH=WORKALEN,SP=0,KEY=8,                    X
               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')
         LTR   R15,R15                 CHECK RC
         BZ    STARTUP                 GOT ZERO, OK
         BAL   R14,ABEND               DI DI DI DAAAAA!
STARTUP  LAE   R13,0(R1,0)             @ THE WORKAREA
         USING WORKAREA,R13            INFORM THE ASSEMBLER
         LAE   R13,SAVEAREA            @ THE SAVEAREA
         MVC   PREVSA,=C'F1SA'         PUT ACRONYM INTO SAVEAREA
*                                      TO INDICATE STATUS SAVED ON
*                                      THE LINKAGE STACK.
         LA    R0,INITWA               INITIALIZE FROM HERE
         LA    R1,INITWAE              LENGTH
         LA    R2,WAINIT@              INITIALIZE TO HERE
         LA    R3,INITWAE              LENGTH
         MVCL  R2,R0                   INITIALIZE WORKAREA
OPEN     EQU   *
         SR    R10,R10                 CLEAR IT
         LA    R10,SOUTDCB             ADDRESS SOUT DCB
         USING IHADCB,R10              INFORM THE ASSEMBLER
         LA    R1,SOUTDCBE             LOAD ADDRESS OF DCBE
         STCM  R1,B'1111',DCBDCBE      STORE IN DCB
         OI    DCBBFALN,DCBH0          TELL EM DCBE EXISTS
OPENSOUT OPEN  ((R10),(OUTPUT)),MF=(E,SOUTOPEN),MODE=31
         TM    DCBOFLGS,X'10'          OPEN OKAY?
         BO    OPENOK                  YES-
         BAL   R14,ABEND
OPENOK   EQU   *
         ICM   R3,B'1111',=F'32768'    START WITH 32K
         MVC   RTRNADDR,RTRN@CSA       SAVE FUNKY RETURN ADDRESS
         MVC   SUBPTYPE,=C'SQA-'       WE'RE GONNA DO 'SQA' FIRST
GETSQA@  STORAGE OBTAIN,LENGTH=(3),SP=0,KEY=8,                         X
               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')
         LTR   R15,R15    *----------->DID IT WORK
         BNZ   SQABEND    *----------->NOT! GO ABEND
         LR    R2,R1      *----------->SAVE ADDRESS OF STORAGE
         VSMLIST SP=SQA,SPACE=FREE,WKAREA=((2),(3)) GO GET THE SQA MAP
         LTR   R15,R15    *----------->DID IT WORK
         BZ    GETCALC    *----------->YEP! GO PROCESS THE MAP
         CH    R15,=H'4'  *----------->TOOO BIG!
         BE    REL@SQA    *----------->GO GET A BIGGER BLOCK
         BAL   R14,ABEND  *----------->BOO! HISS! ABEND RIGHT NOW
REL@SQA  STORAGE RELEASE,LENGTH=(3),ADDR=(2),                          X
               COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')
         SLL   R3,1       *----------->FREED OLD VALUE NOW DOUBLE
         BE    GETSQA@    *----------->GO BACK AND GET DOUBLED VALUE
SQABEND  BAL   R14,ABEND  *----------->YUKI DOO! ABEND RIGHT NOW
GET@CSA  LM    R2,R3,SAVEADDR          WE ALREADY GOT SOME STORAGE
         L     R14,SAVEADDR            LOAD ADDRESS
         SR    R15,R15                 CLEAR REG15
         MVCL  R2,R14                  CLEAR AREA
         LM    R2,R3,SAVEADDR          RELOAD ADDRESS OF CLEARED STG
         MVC   RTRNADDR,RTRN@END       SAVE THE FUNK RETURN ADDRESS
         MVC   SUBPTYPE,=C'CSA-'       TELL EM IT'S 'CSA' NOW
         B     VSMLSCSA                GO GET THE CSA MAP
GETCSA@  STORAGE OBTAIN,LENGTH=(3),SP=0,KEY=8,                         X
               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')
         LTR   R15,R15    *----------->DID IT WORK
         BNZ   CSABEND    *----------->NOT! GO ABEND
         LR    R2,R1      *----------->SAVE ADDRESS OF STORAGE
VSMLSCSA VSMLIST SP=CSA,SPACE=FREE,WKAREA=((2),(3)) GO GET THE SQA MAP
         LTR   R15,R15    *----------->DID IT WORK
         BZ    GETCALC    *----------->YEP! GO PROCESS THE MAP
         CH    R15,=H'4'  *----------->TOOO BIG!
         BE    REL@CSA    *----------->GO GET A BIGGER BLOCK
CSABEND  BAL   R14,ABEND  *----------->YUKI! DOO! ABEND RIGHT NOW
REL@CSA  STORAGE RELEASE,LENGTH=(3),ADDR=(2),                          X
               COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')
         SLL   R3,1       *----------->FREED OLD VALUE NOW DOUBLE
         BE    GETCSA@    *----------->GO BACK AND GET DOUBLED VALUE
         BAL   R14,ABEND  *----------->BOO! HISS! ABEND RIGHT NOW
*
GETCALC  EQU   *
         SR    R1,R1                       SET TO ADDRESS OF PSA
         ICM   R1,B'1111',FLCCVT-PSA(R1)   ADDRESS OF CURRENT CVT
         ICM   R1,B'1111',CVTGDA-CVT(R1)   ADDRESS OF CURRENT GDA
         MVC   CSASTRT,GDACSA-GDA(R1)      GET BOTTOM OF CSA
         STM   R2,R3,SAVEADDR          SAVE STORAGE ADDRESS & LENGTH
         L     R2,4(,R2)               GET ADDRESS OF VSMLIST
         L     R3,0(,R2)               GET NUMBER OF SUBPOOLS
         LA    R2,4(,R2)               BUMP TO FIRST ENTRY
SUBPCVT  L     R4,8(,R2)               GET NUMBER OF SEGMENTS
         SR    R5,R5                   CLEAR
         IC    R5,2(R2)                LOAD SUBPOOL
         CVD   R5,DWORK                CONVERT TO DECIMAL
         UNPK  SUBPOOL#(4),DWORK+6(2)  UNPACK TO MESSAGE
         OC    SUBPOOL#(4),=C'0000'    TRANSLATE TO CHAR
         MVC   SUBPOOL@,SUBPTYPE       MOVE IN TYPE 'CSA' OR 'SQA'
         IC    R5,3(,R2)               GET STORAGE PROTECT
         SRL   R5,4                      KEY IN R5
         STC   R5,SUBPOOL@+2               SAVE IT AND
         NI    SUBPOOL@+2,X'0F'
         TR    SUBPOOL@+2(1),HEXTOCHR     TRANSLATE TO CHAR 0-F
         MVC   SUBPOOL@(2),=C'K-'      INDICATE KEY
         LA    R2,12(,R2)              BUMP TO FIRST ENTRY
SUBPLOOP EQU   *
         LM    R5,R7,0(R2)             LOAD ADDRESS AND LENGTH
         LA    R2,12(,R2)              BUMP PAST ENTRY
         LTR   R7,R7                   GOT FREE SEGMENTS
         BNZ   RECALC                  YEP! GO GET EM
         STM   R5,R6,SAVECUR@          NOT SO SAVE IT
         BAL   R14,GET_CSATKR            AND PROCESS GQE/CUAB CHAIN
         B     CALCBUMP                NEXT ENTRY
RECALC   EQU   *                  GO HERE TO CALCULATE ALLOCATED AREAS
         LM    R8,R9,0(R2)             LOAD UP FREE AREA AND LENGTH
         CLR   R5,R8                   COMPARE TO START OF AREA
         BE    CALCCONT                EQUAL SO BUMP PAST FREE SPACE
CALCNEXT EQU   *                  GO HERE TO CALCULATE NEXT AREA
         SLR   R8,R5                   GET THE LENGTH IN R8
         ST    R5,SAVECUR@             SAVE IT
         ST    R8,SAVECUR#               AND CALL
         SLR   R6,R8                   DECREMENT LENGTH VALUE
         ALR   R5,R8                   BUMP PAST FREE AREA
         BAL   R14,GET_CSATKR              THE GQE/CAUB CHAIN ROUTINE
         B     RECALC                  LOAD UP ADDRESS
CALCCONT SLR   R6,R9                   DECREMENT LENGTH VALUE
         ALR   R5,R9                   BUMP PAST FREE AREA
         LA    R2,8(,R2)               POINT TO NEXT ENTRY/EXTENT
         BCT   R7,RECALC          FREE EXTENT SO LOOP BACK TO RECALC
         LTR   R6,R6
         BZ    CALCBUMP
         STM   R5,R6,SAVECUR@          NOT SO GO PROCEXX
         BAL   R14,GET_CSATKR            THE GQE/CAUB CHAIN
CALCBUMP BCT   R4,SUBPLOOP             STILL IN THIS SUBPOOL
         BCT   R3,SUBPCVT              STILL IN 'CSA' OR 'SQA'
         B     RTRNADDR                DONE SO DO THE FUNKY RETURN
*
GET_CSATKR EQU *
         BAKR  R14,0                       SAVE THE STUFF
         LM    R5,R6,SAVECUR@              LOAD UP ADDRESS/LENGTH
         BCTR  R6,0                        DECREMENT R6
         ALR   R6,R5
         LR    R14,R6
         LR    R15,R5
         SRL   R14,16
         SRL   R15,16
         STM   R14,R15,GQE_BDY
*                                          R5 HOLDS LOW BOUNDRY
         SR    R1,R1                       SET TO ADDRESS OF PSA
         ICM   R1,B'1111',FLCCVT-PSA(R1)   ADDRESS OF CURRENT CVT
         ICM   R1,B'1111',CVTGDA-CVT(R1)   ADDRESS OF CURRENT GDA
         ICM   R1,B'1111',GDAGQAT_INDEX-GDA(R1) GQAT INDEX
         LR    R8,R5                       PRIME ADDRESS
         SRDL  R8,23                       HIGH 9 BITS
         SLL   R8,2                        INDEX ADDRESS
         L     R1,0(R8,R1)                 LOAD ADDRES OF GQAT
         SR    R8,R8                       CLEAR R8
         SLDL  R8,7                        GET GQE INDEX
         SLL   R8,2                        INDEX ADDRESS
         L     R7,4(R8,R1)                 GQE TABLE
         LTR   R7,R7                       IS IT THE LAST ENTRY?
         BNZ   LOOP_GQE                    NOT! GO PROCESS GQE/CAUB
         B     EXIT_GQE                    GO BACK FOR MORE
         USING GQE,R7
LOOP_GQE EQU   *
         CL    R5,GQE_AREA                 IS THE AREA TOO SMALL?
         BH    NEXT_GQE                      UH HUH! NEXT
         CL    R6,GQE_AREA                 IS THE AREA TO BIG?
         BL    NEXT_GQE                      UH HUH! NEXT
         BAL   R14,UNPK_GQE                GO PRINT GQE/CAUB
NEXT_GQE L     R7,GQE_NEXT                 GET NEXT GQE
         LTR   R7,R7                       IS IT LAST GQE
         BNZ   LOOP_GQE                    NOT SO LOOP
HBDY_GQE EQU   *
         LM    R14,R15,GQE_BDY
         CLR   R14,R15
         BE    EXIT_GQE
         LA    R15,1(,R15)
         STM   R14,R15,GQE_BDY
         SRL   R5,16
         LA    R5,1(,R5)
         SLL   R5,16
         SR    R1,R1                       SET TO ADDRESS OF PSA
         ICM   R1,B'1111',FLCCVT-PSA(R1)   ADDRESS OF CURRENT CVT
         ICM   R1,B'1111',CVTGDA-CVT(R1)   ADDRESS OF CURRENT GDA
         ICM   R1,B'1111',GDAGQAT_INDEX-GDA(R1) GQAT INDEX
         LR    R8,R5                       PRIME ADDRESS
         SRDL  R8,23                       HIGH 9 BITS
         SLL   R8,2                        INDEX ADDRESS
         L     R1,0(R8,R1)                 LOAD ADDRES OF GQAT
         SR    R8,R8                       CLEAR R8
         SLDL  R8,7                        GET GQE INDEX
         SLL   R8,2                        INDEX ADDRESS
         L     R7,4(R8,R1)                 GQE TABLE
         LTR   R7,R7
         BNZ   LOOP_GQE
EXIT_GQE PR
*
UNPK_GQE EQU   *
         BAKR  R14,0
         ST    R7,GQE_SAVE                 SAVE GQE ADDRESS
         UNPK  GQEADDR(9),GQE_SAVE(5)      UNPACK TO MESSAGE
         NC    GQEADDR(8),=X'0F0F0F0F0F0F0F0F'
         TR    GQEADDR(8),HEXTOCHR         TRANSLATE TO CHAR
         MVI   GQEADDR+8,C' '              BLANK TRASH BYTE
         UNPK  CAUBADDR(9),GQE_CAUB(5)     UNPACK TO MESSAGE
         NC    CAUBADDR(8),=X'0F0F0F0F0F0F0F0F'
         TR    CAUBADDR(8),HEXTOCHR        TRANSLATE TO CHAR
         MVI   CAUBADDR+8,C' '             BLANK TRASH BYTE
         MVI   CSA_IND,C'S'
         TM    GQE_RETADDR_BYTE3,GQE_CSA   CSA
         BNO   LDCAUB@
         MVI   CSA_IND,C'C'
LDCAUB@  L     R1,GQE_CAUB                 ADDRESS OF CAUB
         USING CAUB,R1
         MVC   JOBNAME,CAUB_JOBNAME        MOVE IN JOBNAME
         MVC   JOBID,CAUB_JOBID            JOB NUMBER
         CLC   JOBID,=XL8'0000000000000000'
         BNE   UNPKASID
         MVC   JOBID,=C'........'
UNPKASID UNPK  JOBASID(5),CAUB_ASN(3)      UNPACK TO MESSAGE
         NC    JOBASID(4),=X'0F0F0F0F0F0F0F0F'
         TR    JOBASID(4),HEXTOCHR         TRANSLATE TO CHAR
         MVI   JOBASID+4,C' '              BLANK TRASH BYTE
         MVC   OWNERACT,=X'C183'
         CLC   CAUB_UNOWNED_DATE,=F'0'
         BE    UNPK_AR@
         MVC   OWNERACT,=C'OG'
         DROP  R1
UNPK_AR@ UNPK  AREADDR@(9),GQE_AREA(5)     UNPACK TO MESSAGE
         NC    AREADDR@(8),=X'0F0F0F0F0F0F0F0F'
         TR    AREADDR@(8),HEXTOCHR        TRANSLATE TO CHAR
         MVI   AREADDR@+8,C' '             BLANK TRASH BYTE
         UNPK  AREALEN#(9),GQE_SIZE(5)     UNPACK TO MESSAGE
         NC    AREALEN#(8),=X'0F0F0F0F0F0F0F0F'
         TR    AREALEN#(8),HEXTOCHR        TRANSLATE TO CHAR
         MVI   AREALEN#+8,C' '             BLANK TRASH BYTE
         XC    TODSTAMP,TODSTAMP
         MVC   TODSTAMP(4),GQE_GMTIME
         CLC   TODSTAMP(4),=F'0'           CHECK FOR 0S
         BE    UNPK_IPL
         STCKCONV STCKVAL=TODSTAMP,CONVVAL=OUTAREA,TIMETYPE=DEC,       X
               DATETYPE=MMDDYYYY
         B     UNPK_CVD
* PUT IN THE IPL DATE/TIME FOR *SYSTEM* STUFF WITH 0S IN GQE_GMTIME
UNPK_IPL SR    R1,R1                       SET TO ADDRESS OF PSA
         ICM   R1,B'1111',FLCCVT-PSA(R1)   ADDRESS OF CURRENT CVT
         ICM   R1,B'1111',CVTSMCA-CVT(R1)  ADDRESS OF CURRENT GDA
         MVC   INBINTME,SMCAITME-SMCABASE(R1) GET SYSTEM ID
         MVC   INDATE,SMCAIDTE-SMCABASE(R1) MOVE IN IPL DATE
         CONVTOD CONVVAL=INTOD,            CONVERT TO TOD VALUE        X
               TODVAL=TODSTAMP,                                        X
               TIMETYPE=BIN,               SMCAITME IS IN BINARY       X
               DATETYPE=YYDDD              SMCAIDTE IS JULIAN
         STCKCONV STCKVAL=TODSTAMP,        CONVERT TO DEC TIME         X
               CONVVAL=OUTAREA,                                        X
               TIMETYPE=DEC,               DECIMAL TIME VALUE          X
               DATETYPE=MMDDYYYY           READABLE DATE FORMAT
* MOVE THE DATE AND TIME INTO FIELDS FOR PRINTING
UNPK_CVD MVC   ALLOCDAT,DATEPTRN           SET UP FOR EDITING
         ED    ALLOCDAT(11),TODDATE        MAKE IT LOOK LIKE DATE
         MVI   ALLOCDAT,C' '               CLEAR FIRST BYTE
         MVC   ALLOCTIM,TIMEPTRN           SET UP FOR EDITING
         ED    ALLOCTIM(9),TODTIME         MAKE IT LOOK LIKE TIME
         MVI   ALLOCTIM,C' '               CLEAR FIRST BYTE
         SR    R1,R1                       SET TO ADDRESS OF PSA
         ICM   R1,B'1111',FLCCVT-PSA(R1)   ADDRESS OF CURRENT CVT
         ICM   R1,B'1111',CVTSMCA-CVT(R1)  ADDRESS OF CURRENT GDA
         MVC   SMFID,SMCASID-SMCABASE(R1)  GET SYSTEM ID
         PUT   SOUTDCB,RECAREA             WRITE THE RECORD
         PR                                RETURN FOR MORE
         DROP  R7
*
RETURN   EQU   *
         CLOSE ((R10)),MF=(E,SOUTCLOS),MODE=31
         LAE   R10,0(R13,0)            ADDRESS TO FREE
         STORAGE RELEASE,LENGTH=WORKALEN,ADDR=(R10),SP=0,KEY=8,        X
               COND=NO,RELATED=(GETWORK,'OBTAIN WORK AREA')
         LTR   R15,R15                 CHECK RC
         BZ    SETRC                   GOT ZERO, OK
         BAL   R14,ABEND               THIS STUFF JUST WON'T CUT IT!
SETRC    EQU   *
         SLR   R15,R15                 SET RC TO ZERO
         PR
RTRN@CSA B     GET@CSA
RTRN@END B     RETURN
ABEND    LA    R1,FIDVSMLS              GET THE BASE ADDRESS
         SLR   R14,R1                   GET THE OFFSET
         ST    R14,RTRNADDR             SAVE IT
         LA    R1,VSMLISTA              LOAD WTO PARAMETER LIST
         USING WPLLGH,R1                ADDRESSABILITY
         UNPK  WPLTXT+41(5),RTRNADDR+2(3) TRANSLATE THIS BUBBA
         TR    WPLTXT+41(5),HEXTOCHR    TRANSLATE TO CHAR
         MVI   WPLTXT+45,C' '           OFFSET PLEASE
         ST    R15,RTRNADDR
         UNPK  WPLTXT+50(9),RTRNADDR(5) TRANSLATE THIS BUBBA
         TR    WPLTXT+50(8),HEXTOCHR    TRANSLATE TO CHAR
         MVI   WPLTXT+58,C' '           OFFSET PLEASE
         WTO   MF=(E,(1))               WTO THE MESSAGE
         ABEND 1000,DUMP                ABEND USER 1000
         LTORG
TIMEPTRN DC    X'F021217A21217A2121'
DATEPTRN DC    X'F021216121216121212121'
*EXTOCHR EQU   *-C'0'
HEXTOCHR DC    C'0123456789ABCDEF'
         DS    0D
INITWA   EQU   *
         WTO   'FIDVSMLS - VSMLIST HAS FAILED @ FIDVSMLS+XXXX R15=XXXXX-
               XXX ',MF=L
         OPEN  (,),MF=L,MODE=31
         CLOSE (,),MF=L,MODE=31
         DCB   DSORG=PS,DEVD=DA,MACRF=(PM),DDNAME=VSMLIST,             X
               RECFM=FB,LRECL=132
         DCBE  RMODE31=BUFF            DCB EXTENSION
         DS    0D
RECAREA@ DC    CL2' '
CLR@AREA DC    CL5'.... '
         DC    CL9'VSMLIST* '
         DC    CL9'........ '
         DC    CL5'.. . '
         DC    CL9' '
         DC    CL9' '
         DC    CL8' '
         DC    CL11' '
         DC    CL10'         .'
         DC    CL9' '
         DC    CL9' '
         DC    CL4' '
CLR@AREL EQU   *-CLR@AREA
         DC    CL(132-(*-RECAREA@))' '
INITWAE  EQU   *-INITWA
WORKAREA DSECT
SAVEAREA DS    18F                     REGISTER SAVEAREA
PREVSA   EQU   SAVEAREA+4,4            PREVIOUS SAVEAREA
RTRNADDR DS    F                       RETURN ADDRESS
SUBPTYPE DS    CL4
SUBPOOL# DS    CL4
SAVEADDR DS    D
INTOD    DS    0F                      TIME CONVERSION VARS
INBINTME DS    F                       *
         DC    F'0'                    *
INDATE   DS    F                       *
         DS    F                       *
TODSTAMP DS    D                       TOD  CLOCK  VALUE
OUTCONV  DS    2D                      *
OUTAREA  DS    3F                      CONVERTED  VALUE
         ORG   OUTAREA
TODTIME  DS    F
         DS    F
TODDATE  DS    F
HIGHBDY  DS    F
REQ_LENG DS    F
SAVECUR@ DS    F
SAVECUR# DS    F
SAVENEW@ DS    F
SAVENEW# DS    F
DWORK    DS    D
WAINIT@  EQU   *
VSMLISTA WTO   'FIDVSMLS - VSMLIST HAS FAILED @ FIDVSMLS+XXXX R15=XXXXX-
               XXX ',MF=L
SOUTOPEN OPEN  (,),MF=L,MODE=31
SOUTCLOS CLOSE (,),MF=L,MODE=31
SOUTDCB  DCB   DSORG=PS,DEVD=DA,MACRF=(PM),DDNAME=VSMLIST,             X
               RECFM=FB,LRECL=132
SOUTDCBE DCBE  RMODE31=BUFF            DCB EXTENSION
         DS    0D
RECAREA  DC    CL2' '
JOBASID  DC    CL4' ',C' '
JOBNAME  DC    CL8' ',C' '
JOBID    DC    CL8' ',C' '
OWNERACT DC    CL2' ',C' '
CSA_IND  DC    CL1' ',C' '
AREADDR@ DC    CL8' ',C' '
AREALEN# DC    CL8' ',C' '
SUBPOOL@ DC    CL8' '
ALLOCDAT DC    CL11' '
ALLOCTIM DC    CL9' ',C'.'
CAUBADDR DC    CL8' ',C' '
GQEADDR  DC    CL8' ',C' '
SMFID    DC    CL4' '
RECAREAL EQU   *-RECAREA
         DC    CL(132-RECAREAL)' '
INITWA@  EQU   *-WAINIT@
WORKALEN EQU   *-WORKAREA              WORK AREA LENGTH
GQE_BDY  DS    0D
GQE_HIGH DS    F
GQE_LOW  DS    F
GQE_SAVE DS    F
CSASTRT  DS    F
CSALOW   DS    F
NEXTSA   EQU   8                       POINTER TO PREVIOUS SAVEAREA
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
OFF@R0   EQU   4*0
OFF@R1   EQU   4*1
OFF@R2   EQU   4*2
OFF@R3   EQU   4*3
OFF@R4   EQU   4*4
OFF@R5   EQU   4*5
OFF@R6   EQU   4*6
OFF@R7   EQU   4*7
OFF@R8   EQU   4*8
OFF@R9   EQU   4*9
OFF@R10  EQU   4*10
OFF@R11  EQU   4*11
OFF@R12  EQU   4*12
OFF@R13  EQU   4*13
OFF@R14  EQU   4*14
OFF@R15  EQU   4*15
         IEZWPL
         DCBD  DSORG=(QS),DEVD=DA
         CVT   DSECT=YES
         IHAGDA
         IHAPSA
         IGVCAUB
         IGVGQE
         IEESMCA
         END   FIDVSMLS
/*
//LINK.SYSLIN DD *
 INCLUDE OBJECT
 ENTRY FIDVSMLS
 NAME FIDVSMLS(R)
/*
//*
//VSMLIST EXEC PGM=FIDVSMLS,COND=(4,LT)
//STEPLIB  DD DSN=your.load.library,DISP=SHR
//*
//* PUT YOUR OUTPUT DATASET IN VSMLIST DD BELOW
//* FOR SAS REPORTING
//VSMLIST  DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
